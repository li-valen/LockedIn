(()=>{"use strict";console.log("LockedIn background service worker started"),new class{constructor(){this.data={workSites:["github.com","figma.com","notion.so","linear.app"],currentWorkTime:0,isWorking:!1,startTime:0,dailyWorkTime:0,lastResetDate:(new Date).toDateString()},this.isUserActive=!0,this.isSystemActive=!0,this.lastActivityTime=Date.now(),this.activityCheckInterval=null,this.initialize()}async initialize(){await this.loadData(),this.setupEventListeners(),this.startTracking(),this.resetDailyIfNeeded()}async loadData(){try{const t=await chrome.storage.local.get(["workTrackerData"]);t.workTrackerData&&(this.data={...this.data,...t.workTrackerData}),await this.saveData()}catch(t){console.error("Failed to load data:",t)}}async saveData(){try{await chrome.storage.local.set({workTrackerData:this.data})}catch(t){console.error("Failed to save data:",t)}}setupEventListeners(){chrome.tabs.onUpdated.addListener((t,e,s)=>{"complete"===e.status&&s.url&&this.checkWorkSite(s.url)}),chrome.tabs.onActivated.addListener(async t=>{try{const e=await chrome.tabs.get(t.tabId);e.url&&this.checkWorkSite(e.url)}catch(t){console.error("Error getting tab:",t)}}),chrome.windows.onFocusChanged.addListener(async t=>{if(t===chrome.windows.WINDOW_ID_NONE)this.pauseTracking();else try{const[e]=await chrome.tabs.query({active:!0,windowId:t});e?.url&&this.checkWorkSite(e.url)}catch(t){console.error("Error checking active tab:",t)}}),chrome.idle.onStateChanged.addListener(t=>{console.log("Idle state changed:",t),"active"===t?(this.isUserActive=!0,this.isSystemActive=!0,this.lastActivityTime=Date.now(),this.checkCurrentTab()):"locked"===t?(this.isSystemActive=!1,this.pauseTracking()):"idle"===t&&(this.isUserActive=!1,console.log("User marked as idle but continuing to track"))}),chrome.runtime.onMessage.addListener((t,e,s)=>(this.handleMessage(t,e,s),!0)),chrome.runtime.onInstalled.addListener(()=>{console.log("LockedIn extension installed"),this.setupBadge(),chrome.idle.setDetectionInterval(60)}),this.startSuspendDetection()}async checkCurrentTab(){try{const[t]=await chrome.tabs.query({active:!0,currentWindow:!0});t?.url&&this.checkWorkSite(t.url)}catch(t){console.error("Error checking current tab:",t)}}checkWorkSite(t){const e=this.data.workSites.some(e=>t.includes(e));console.log("Checking work site:",{url:t,isWorkSite:e,isWorking:this.data.isWorking,isUserActive:this.isUserActive,isSystemActive:this.isSystemActive,workSites:this.data.workSites}),e&&!this.data.isWorking&&this.isSystemActive?(console.log("Starting work - work site and system active"),this.startWork()):e&&this.isSystemActive||!this.data.isWorking||(console.log("Stopping work - conditions not met:",{isWorkSite:e,isSystemActive:this.isSystemActive}),this.stopWork())}pauseTracking(){this.data.isWorking&&(console.log("Pausing tracking due to inactivity/sleep"),this.stopWork())}startWork(){this.data.isWorking=!0,this.data.startTime=Date.now(),this.updateBadge("ON"),console.log("Started working")}stopWork(){if(this.data.isWorking){const t=Date.now()-this.data.startTime;this.data.currentWorkTime+=t,this.data.dailyWorkTime+=t,this.data.isWorking=!1,this.updateBadge("OFF"),this.saveData(),this.syncToFirebase(),console.log("Stopped working. Duration:",t)}}updateBadge(t){chrome.action.setBadgeText({text:t}),chrome.action.setBadgeBackgroundColor({color:"ON"===t?"#10b981":"#6b7280"})}setupBadge(){chrome.action.setBadgeText({text:"OFF"}),chrome.action.setBadgeBackgroundColor({color:"#6b7280"})}startSuspendDetection(){this.activityCheckInterval=setInterval(()=>{const t=Date.now(),e=t-this.lastActivityTime;e>1e4&&(console.log("System suspend detected (time gap:",e,"ms)"),this.isSystemActive=!1,this.pauseTracking(),this.isSystemActive=!0,this.checkCurrentTab()),this.lastActivityTime=t},5e3)}startTracking(){setInterval(()=>{if(this.data.isWorking&&this.isSystemActive){const t=Date.now()-this.data.startTime;this.data.currentWorkTime+=t,this.data.dailyWorkTime+=t,this.data.startTime=Date.now(),this.saveData(),this.syncToFirebase()}else this.data.isWorking&&!this.isSystemActive&&this.pauseTracking()},5e3),setInterval(()=>{this.data.userId&&this.data.dailyWorkTime>0&&this.syncToFirebase()},3e4),chrome.idle.setDetectionInterval(60)}resetDailyIfNeeded(){const t=(new Date).toDateString();this.data.lastResetDate!==t&&(this.data.dailyWorkTime=0,this.data.lastResetDate=t,this.saveData(),this.syncToFirebase())}async syncToFirebase(){if(this.data.userId)try{chrome.runtime.sendMessage({action:"syncDailyStats",userId:this.data.userId,dailyWorkTime:this.data.dailyWorkTime}).catch(()=>{console.log("Popup not open, skipping sync message")})}catch(t){console.error("Failed to sync to Firebase:",t)}}async handleMessage(t,e,s){try{switch(t.action){case"pageVisible":t.url&&this.checkWorkSite(t.url),s({success:!0});break;case"pageHidden":"navigation"!==t.reason&&"tab_switch"!==t.reason||this.pauseTracking(),s({success:!0});break;case"userActivity":this.isUserActive=!0,this.lastActivityTime=Date.now(),t.url&&this.checkWorkSite(t.url),s({success:!0});break;case"getWorkTime":s({workTime:this.data.currentWorkTime,dailyWorkTime:this.data.dailyWorkTime,isWorking:this.data.isWorking});break;case"getWorkSites":s({workSites:this.data.workSites});break;case"addWorkSite":t.site&&!this.data.workSites.includes(t.site)?(this.data.workSites.push(t.site),await this.saveData(),s({success:!0})):s({success:!1,error:"Site already exists or invalid"});break;case"removeWorkSite":this.data.workSites=this.data.workSites.filter(e=>e!==t.site),await this.saveData(),s({success:!0});break;case"getStatus":s({isWorking:this.data.isWorking,workSites:this.data.workSites,dailyWorkTime:this.data.dailyWorkTime});break;case"setUserId":this.data.userId=t.userId,await this.saveData(),s({success:!0});break;case"getUserId":s({userId:this.data.userId});break;case"syncToFirebase":this.syncToFirebase(),s({success:!0});break;default:s({error:"Unknown action"})}}catch(t){console.error("Error handling message:",t),s({error:"Internal error"})}}}})();