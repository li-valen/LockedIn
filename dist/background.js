(()=>{"use strict";console.log("LockedIn background service worker started"),new class{constructor(){this.data={workSites:["github.com","figma.com","notion.so","linear.app"],currentWorkTime:0,isWorking:!1,startTime:0,dailyWorkTime:0,lastResetDate:(new Date).toDateString()},this.initialize()}async initialize(){await this.loadData(),this.setupEventListeners(),this.startTracking(),this.resetDailyIfNeeded()}async loadData(){try{const t=await chrome.storage.local.get(["workTrackerData"]);t.workTrackerData&&(this.data={...this.data,...t.workTrackerData}),await this.saveData()}catch(t){console.error("Failed to load data:",t)}}async saveData(){try{await chrome.storage.local.set({workTrackerData:this.data})}catch(t){console.error("Failed to save data:",t)}}setupEventListeners(){chrome.tabs.onUpdated.addListener((t,a,e)=>{"complete"===a.status&&e.url&&this.checkWorkSite(e.url)}),chrome.tabs.onActivated.addListener(async t=>{try{const a=await chrome.tabs.get(t.tabId);a.url&&this.checkWorkSite(a.url)}catch(t){console.error("Error getting tab:",t)}}),chrome.runtime.onMessage.addListener((t,a,e)=>(this.handleMessage(t,a,e),!0)),chrome.runtime.onInstalled.addListener(()=>{console.log("LockedIn extension installed"),this.setupBadge()})}checkWorkSite(t){const a=this.data.workSites.some(a=>t.includes(a));a&&!this.data.isWorking?this.startWork():!a&&this.data.isWorking&&this.stopWork()}startWork(){this.data.isWorking=!0,this.data.startTime=Date.now(),this.updateBadge("ON"),console.log("Started working")}stopWork(){if(this.data.isWorking){const t=Date.now()-this.data.startTime;this.data.currentWorkTime+=t,this.data.dailyWorkTime+=t,this.data.isWorking=!1,this.updateBadge("OFF"),this.saveData(),this.syncToFirebase(),console.log("Stopped working. Duration:",t)}}updateBadge(t){chrome.action.setBadgeText({text:t}),chrome.action.setBadgeBackgroundColor({color:"ON"===t?"#10b981":"#6b7280"})}setupBadge(){chrome.action.setBadgeText({text:"OFF"}),chrome.action.setBadgeBackgroundColor({color:"#6b7280"})}startTracking(){setInterval(()=>{if(this.data.isWorking){const t=Date.now()-this.data.startTime;this.data.currentWorkTime+=t,this.data.dailyWorkTime+=t,this.data.startTime=Date.now(),this.saveData(),this.syncToFirebase()}},1e4),setInterval(()=>{this.data.userId&&this.data.dailyWorkTime>0&&this.syncToFirebase()},12e4)}resetDailyIfNeeded(){const t=(new Date).toDateString();this.data.lastResetDate!==t&&(this.data.dailyWorkTime=0,this.data.lastResetDate=t,this.saveData(),this.syncToFirebase())}async syncToFirebase(){if(this.data.userId)try{chrome.runtime.sendMessage({action:"syncDailyStats",userId:this.data.userId,dailyWorkTime:this.data.dailyWorkTime}).catch(()=>{console.log("Popup not open, skipping sync message")})}catch(t){console.error("Failed to sync to Firebase:",t)}}async handleMessage(t,a,e){try{switch(t.action){case"getWorkTime":e({workTime:this.data.currentWorkTime,dailyWorkTime:this.data.dailyWorkTime,isWorking:this.data.isWorking});break;case"getWorkSites":e({workSites:this.data.workSites});break;case"addWorkSite":t.site&&!this.data.workSites.includes(t.site)?(this.data.workSites.push(t.site),await this.saveData(),e({success:!0})):e({success:!1,error:"Site already exists or invalid"});break;case"removeWorkSite":this.data.workSites=this.data.workSites.filter(a=>a!==t.site),await this.saveData(),e({success:!0});break;case"getStatus":e({isWorking:this.data.isWorking,workSites:this.data.workSites,dailyWorkTime:this.data.dailyWorkTime});break;case"setUserId":this.data.userId=t.userId,await this.saveData(),e({success:!0});break;case"getUserId":e({userId:this.data.userId});break;case"syncToFirebase":this.syncToFirebase(),e({success:!0});break;default:e({error:"Unknown action"})}}catch(t){console.error("Error handling message:",t),e({error:"Internal error"})}}}})();